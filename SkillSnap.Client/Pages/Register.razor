@page "/register"
@using Microsoft.AspNetCore.Components.Forms
@inject SkillSnap.Client.Services.IHttpClientService HttpClientService
@inject NavigationManager Navigation

<h3>Register</h3>

<EditForm Model="registerModel" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />
    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert @messageClass">@message</div>
    }
    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <InputText id="email" class="form-control" @bind-Value="registerModel.Email" />
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="registerModel.Password" />
    </div>
    <div class="mb-3">
        <label for="confirmPassword" class="form-label">Confirm Password</label>
        <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="registerModel.ConfirmPassword" />
    </div>
    <div class="mb-3">
        <label for="name" class="form-label">Name</label>
        <InputText id="name" class="form-control" @bind-Value="registerModel.Name" />
    </div>
    <div class="mb-3">
        <label for="bio" class="form-label">Bio</label>
        <InputTextArea id="bio" class="form-control" @bind-Value="registerModel.Bio" />
    </div>
    <div class="mb-3">
        <label for="profileImageUrl" class="form-label">Profile Image URL</label>
        <InputText id="profileImageUrl" class="form-control" @bind-Value="registerModel.ProfileImageUrl" />
    </div>
    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@code {
    private RegisterModel registerModel = new();
    private string? message;
    private string messageClass = "alert-danger";

    private async Task HandleRegister()
    {
        message = null;
        if (registerModel.Password != registerModel.ConfirmPassword)
        {
            message = "Passwords do not match.";
            messageClass = "alert-danger";
            return;
        }
        try
        {
            var response = await HttpClientService.PostAsync("api/Auth/register", registerModel);
            if (response.IsSuccessStatusCode)
            {
                message = "Registration successful! Redirecting to login...";
                messageClass = "alert-success";
                await Task.Delay(1500);
                Navigation.NavigateTo("/login");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                message = $"Registration failed: {error}";
                messageClass = "alert-danger";
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            messageClass = "alert-danger";
        }
    }
    public class RegisterModel
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public string ConfirmPassword { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public string Bio { get; set; } = string.Empty;
        public string ProfileImageUrl { get; set; } = string.Empty;
    }
}
